{
	"version": "https://jsonfeed.org/version/1",
	"title": "Becky Sweger",
	"icon": "https://micro.blog/bsweger/avatar.jpg",
	"home_page_url": "https://beckysweger.com/",
	"feed_url": "https://beckysweger.com/feed.json",
	"items": [
		
			{
				"id": "http://bsweger.micro.blog/2025/05/01/mad-and-grateful-and-scared.html",
				"title": "Mad and grateful and scared and lucky",
				"content_html": "<p>Today is one of those perfect spring college campus days. The trees are flowering, the sky is blue, and every open space is filled with students enjoying the sunshine.</p>\n<p>I’m writing this while sitting in one of the many Adirondack chairs scattered around the lawns. Someone is blaring country music, Rhinestone Cowboy. I’m not sure how—what is the 2025 equivalent of a boom box?</p>\n<p>Anyway, I just turned in my UMass laptop because my job here was largely CDC-funded. There’s a good chance the grants will work out, and I hope they do. But in the meantime, I have a family to support and can’t really wait around to find out.</p>\n<p>[we’ve moved on to Dancing Queen, and now there is singing—some things never change]</p>\n<p>I’m lucky. I had the time for an orderly wrap-up and the time to find a job I’m really excited about.</p>\n<p>But I’m still mad. For myself, because I had more to do here, for my erstwhile colleagues who are seeing their life’s work maligned and threatened, for the guy sending the voice of Elvis across the steps of the campus center, for all of us.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Today is one of those perfect spring college campus days. The trees are flowering, the sky is blue, and every open space is filled with students enjoying the sunshine.\n\nI’m writing this while sitting in one of the many Adirondack chairs scattered around the lawns. Someone is blaring country music, Rhinestone Cowboy. I’m not sure how—what is the 2025 equivalent of a boom box?\n\nAnyway, I just turned in my UMass laptop because my job here was largely CDC-funded. There’s a good chance the grants will work out, and I hope they do. But in the meantime, I have a family to support and can’t really wait around to find out.\n\n[we’ve moved on to Dancing Queen, and now there is singing—some things never change]\n\nI’m lucky. I had the time for an orderly wrap-up and the time to find a job I’m really excited about.\n\nBut I’m still mad. For myself, because I had more to do here, for my erstwhile colleagues who are seeing their life’s work maligned and threatened, for the guy sending the voice of Elvis across the steps of the campus center, for all of us.\n\n<img src=\"uploads/2025/image.jpg\" width=\"600\" height=\"450\" alt=\"A red brick building with budding spring trees in the front and a sunny blue sky in the back. The sign in front of the building reads “Arnold House”\">\n",
				"date_published": "2025-05-01T17:32:04-04:00",
				"url": "https://beckysweger.com/2025/05/01/mad-and-grateful-and-scared.html"
			},
			{
				"id": "http://bsweger.micro.blog/2025/04/24/goodbye-acadamia-hardly-knew-ya.html",
				"title": "Adventures in academia",
				"content_html": "<p>I&rsquo;m wrapping up an eighteen month stint as a research fellow/research engineer at the University of Massachusetts. Specifically in the <a href=\"https://reichlab.io/people\">Reich Lab</a>, a research team within the School of Public Health&rsquo;s Department of Biostatistics and Epidemiology.</p>\n<p>After six-ish years at a tech company, academia was quite the culture shift. A few former colleagues have asked about making the transition, so what follows are some 100% personal thoughts about the work (which I loved).</p>\n<p>Unlike engineering at a company that sells software, research engineering is a supporting role—a means to an end. You&rsquo;re on someone&rsquo;s grant to help them accomplish their research objectives.</p>\n<p>No one will open a JIRA ticket with a user story about tracking MAU. Instead, the smartest people you&rsquo;ve ever met will walk into your office and start writing on the white board. If there&rsquo;s no white board, they&rsquo;ll grab your pen and start writing in your notebook.</p>\n<p>Sometimes the problems that need solving are in familiar territory: optimizing code, moving things to the cloud, GitHub security. And sometimes the problems that need solving are miles out of your comfort zone, like applying past versions of a SARS-CoV-2 phylogenetic tree to the latest batch of available genome sequences. If you don&rsquo;t have the background to jump in immediately, your colleagues are generous and patient teachers.</p>\n<p>Your communication skills will improve because you&rsquo;re no longer on an engineer-only team, and you can&rsquo;t fall back on engineering jargon to explain your work. Your technical skills will improve because you&rsquo;re working under a different set of constraints.</p>\n<p>Peer review is ingrained in academia. LGTM is not a thing, so you&rsquo;ll start writing clearer documentation, issues, and commit messages. You&rsquo;ll get questions that force you to sharpen your thinking.</p>\n<p>There&rsquo;s no product owner, micro services platform, logging service, event pipeline, identity management, or security team. Tech titles like staff and principal don&rsquo;t mean anything. You can make yourself valuable by going broad, encouraging industry practices where they help, and letting them go when they don&rsquo;t.</p>\n<p>What&rsquo;s next is exciting, but I&rsquo;m beyond grateful for everything I learned at UMass and the brilliant people I met there. See y&rsquo;all at the Blue Wall!</p>\n",
				"content_text": "I'm wrapping up an eighteen month stint as a research fellow/research engineer at the University of Massachusetts. Specifically in the [Reich Lab](https://reichlab.io/people), a research team within the School of Public Health's Department of Biostatistics and Epidemiology.\n\nAfter six-ish years at a tech company, academia was quite the culture shift. A few former colleagues have asked about making the transition, so what follows are some 100% personal thoughts about the work (which I loved).\n\nUnlike engineering at a company that sells software, research engineering is a supporting role—a means to an end. You're on someone's grant to help them accomplish their research objectives.\n\nNo one will open a JIRA ticket with a user story about tracking MAU. Instead, the smartest people you've ever met will walk into your office and start writing on the white board. If there's no white board, they'll grab your pen and start writing in your notebook.\n\nSometimes the problems that need solving are in familiar territory: optimizing code, moving things to the cloud, GitHub security. And sometimes the problems that need solving are miles out of your comfort zone, like applying past versions of a SARS-CoV-2 phylogenetic tree to the latest batch of available genome sequences. If you don't have the background to jump in immediately, your colleagues are generous and patient teachers.\n\nYour communication skills will improve because you're no longer on an engineer-only team, and you can't fall back on engineering jargon to explain your work. Your technical skills will improve because you're working under a different set of constraints.\n\nPeer review is ingrained in academia. LGTM is not a thing, so you'll start writing clearer documentation, issues, and commit messages. You'll get questions that force you to sharpen your thinking.\n\nThere's no product owner, micro services platform, logging service, event pipeline, identity management, or security team. Tech titles like staff and principal don't mean anything. You can make yourself valuable by going broad, encouraging industry practices where they help, and letting them go when they don't.\n\nWhat's next is exciting, but I'm beyond grateful for everything I learned at UMass and the brilliant people I met there. See y'all at the Blue Wall!\n",
				"date_published": "2025-04-24T22:27:18-04:00",
				"url": "https://beckysweger.com/2025/04/24/goodbye-acadamia-hardly-knew-ya.html",
				"tags": ["career","tech"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/04/23/rediscovering-magazine-subscriptions.html",
				"title": "Rediscovering magazine subscriptions",
				"content_html": "<p>One of my money rules is to prioritize spending it on the things you want to see in the world.</p>\n<p>About a year ago, someone somewhere on the internet boosted a post about <a href=\"https://clarkesworldmagazine.com/\">Clarkesworld Science Fiction &amp; Fantasy Magazine</a> and some of the publication&rsquo;s recent troubles:</p>\n<ul>\n<li>Having to temporarily shut off submissions due to a <a href=\"https://www.npr.org/2023/02/24/1159286436/ai-chatbot-chatgpt-magazine-clarkesworld-artificial-intelligence\">deluge of AI-generated stories</a></li>\n<li>Amazon&rsquo;s decision to <a href=\"https://clarkesworldmagazine.com/clarke_09_23/\">stop selling magazine subscriptions via Kindle Newsstand​</a></li>\n</ul>\n<p>Even though I hadn&rsquo;t heard of Clarkesworld, I impulsed joined its <a href=\"https://www.patreon.com/clarkesworld\">Patreon</a> and now, for the price of a streaming service, an actual, physical magazine arrives in the mail each month<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. It&rsquo;s an event! My son knows what the Clarkesworld mailer looks like and insists on being the one to open it so we can look at the gorgeous cover art together.</p>\n<p>It&rsquo;s a comforting ritual for uncertain times. I&rsquo;m behind on the stories, but the magazines-in-waiting look so beautiful on the shelf—future escapes and a reminder that we can have nice things.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>digital-only subscriptions are also available&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "\nOne of my money rules is to prioritize spending it on the things you want to see in the world.\n\nAbout a year ago, someone somewhere on the internet boosted a post about [Clarkesworld Science Fiction & Fantasy Magazine](https://clarkesworldmagazine.com/) and some of the publication's recent troubles:\n\n- Having to temporarily shut off submissions due to a [deluge of AI-generated stories](https://www.npr.org/2023/02/24/1159286436/ai-chatbot-chatgpt-magazine-clarkesworld-artificial-intelligence) \n- Amazon's decision to [stop selling magazine subscriptions via Kindle Newsstand​](https://clarkesworldmagazine.com/clarke_09_23/)\n\nEven though I hadn't heard of Clarkesworld, I impulsed joined its [Patreon](https://www.patreon.com/clarkesworld) and now, for the price of a streaming service, an actual, physical magazine arrives in the mail each month[^1]. It's an event! My son knows what the Clarkesworld mailer looks like and insists on being the one to open it so we can look at the gorgeous cover art together.\n\nIt's a comforting ritual for uncertain times. I'm behind on the stories, but the magazines-in-waiting look so beautiful on the shelf—future escapes and a reminder that we can have nice things.\n\n[^1]: digital-only subscriptions are also available\n",
				"date_published": "2025-04-23T21:49:09-04:00",
				"url": "https://beckysweger.com/2025/04/23/rediscovering-magazine-subscriptions.html",
				"tags": ["stories"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/03/26/excel-for-data-standards.html",
				"title": "Excel for data standards",
				"content_html": "<p>Many years ago, I was part of a team that designed a data standard now used throughout the federal government.</p>\n<p>We created most of the data standard by passing an Excel spreadsheet around via e-mail. That process worked remarkably well, because the people with the deepest domain knowledge–the people who were absolutely critical to the effort–were comfortable working in spreadsheets.</p>\n<p>Make it easy for people to contribute their expertise, and they will.</p>\n",
				"content_text": "Many years ago, I was part of a team that designed a data standard now used throughout the federal government.\r\n\r\nWe created most of the data standard by passing an Excel spreadsheet around via e-mail. That process worked remarkably well, because the people with the deepest domain knowledge–the people who were absolutely critical to the effort–were comfortable working in spreadsheets.\r\n\r\nMake it easy for people to contribute their expertise, and they will.\n",
				"date_published": "2025-03-26T22:18:36-04:00",
				"url": "https://beckysweger.com/2025/03/26/excel-for-data-standards.html",
				"tags": ["stories","data"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/27/pyprefab-principle-contributingmd-all-the.html",
				"title": "CONTRIBUTING.md all the time",
				"content_html": "<p>I&rsquo;m making good on the threat to write about the opinions that inform <a href=\"https://beckysweger.com/2025/02/24/pyprefab-if-you-need-to.html\">pyprefab</a>, a command line interface that generates Python package scaffolding.</p>\n<p>To be honest, avoiding the doomscroll is part of the motivation for noodling around on this project. But I also really like having pyprefab as a central place to codify my project setup opinions, knowing that every change will be easily incorporated into future work.</p>\n<p>One practice I&rsquo;ve come to appreciate is including a <code>CONTRIBUTING.md</code> document in every project, even if I&rsquo;m the only contributor. Every package created via <a href=\"https://bsweger.github.io/pyprefab/\">pyprefab</a> gets one because I say so.</p>\n<h2 id=\"cyclical-coding\">Cyclical coding</h2>\n<p>My non-work coding habits are very cyclical. New England winters are good for writing a bunch of Python and learning what&rsquo;s new, summers less so. I&rsquo;m writing this during sugaring season, which means mud season is coming up, along with the spring peepers and baseball. Finally, finally the world will start turning green, and spending free time with the laptop will be less appealing.</p>\n<p>Inevitably, the pendulum will swing back, and I&rsquo;ll return to an old project and wonder&hellip;how did that <code>.venv</code> get there? Are we doing the lockfile thing or using pip-compile to generate a requirements.txt? And what is that incantation for previewing the docs? <code>CONTRIBUTING.md</code> will be there with the answers.</p>\n",
				"content_text": "I'm making good on the threat to write about the opinions that inform [pyprefab](https://beckysweger.com/2025/02/24/pyprefab-if-you-need-to.html), a command line interface that generates Python package scaffolding.\n\nTo be honest, avoiding the doomscroll is part of the motivation for noodling around on this project. But I also really like having pyprefab as a central place to codify my project setup opinions, knowing that every change will be easily incorporated into future work.\n\nOne practice I've come to appreciate is including a `CONTRIBUTING.md` document in every project, even if I'm the only contributor. Every package created via [pyprefab](https://bsweger.github.io/pyprefab/) gets one because I say so.\n\n## Cyclical coding\n\nMy non-work coding habits are very cyclical. New England winters are good for writing a bunch of Python and learning what's new, summers less so. I'm writing this during sugaring season, which means mud season is coming up, along with the spring peepers and baseball. Finally, finally the world will start turning green, and spending free time with the laptop will be less appealing.\n\nInevitably, the pendulum will swing back, and I'll return to an old project and wonder...how did that `.venv` get there? Are we doing the lockfile thing or using pip-compile to generate a requirements.txt? And what is that incantation for previewing the docs? `CONTRIBUTING.md` will be there with the answers.\n\n\n\n\n",
				"date_published": "2025-02-27T21:37:41-04:00",
				"url": "https://beckysweger.com/2025/02/27/pyprefab-principle-contributingmd-all-the.html",
				"tags": ["python","pyprefab"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/25/remember-the-club-that-thing.html",
				"title": "Don't let someone steal your airbag, read the directions!",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Remember the Club? That thing you lock on a car’s steering wheel to prevent theft?</p>\n<p>When I lived in Philly, someone smashed my car window, popped open the steering wheel, and stole the airbag. I was parked behind a car that was the same make and model as mine, and guess what? That car had a Club, and its window wasn’t smashed.</p>\n<p>A Club won’t deter someone who really wants to steal your car, but it <em>will</em> deter someone looking for an easy target. It’s a basic thing that’s straightforward, readily attainable, and prevents a specific class of problem.</p>\n<p>I am not a security expert, but over the years I’ve learned that the software security equivalent of the Club is often just reading the documentation about good security practices and then doing those things. You’d be surprised how many people don’t do it!</p>\n",
				"date_published": "2025-02-25T23:29:44-04:00",
				"url": "https://beckysweger.com/2025/02/25/remember-the-club-that-thing.html",
				"tags": ["stories","tech"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/24/pyprefab-if-you-need-to.html",
				"title": "uvx pyprefab: if you need to create a Python package real fast",
				"content_html": "<p>The world doesn&rsquo;t need another Python app generator, but I made one anyway. It&rsquo;s called <a href=\"https://pypi.org/project/pyprefab/\">pyprefab</a>, and it&rsquo;s a little cli that prompts for a few pieces of information and then creates a Python package that&rsquo;s ready to go (<em>e.g.</em>, script entry point, test suite, Sphinx docs, configured logs).</p>\n<p>Beyond having a way to quickly stand up new Python projects just the way I like &lsquo;em, my goals for working on pyprefab are:</p>\n<ul>\n<li>\n<p>I&rsquo;ve always worked on internal Python apps and wanted more experience releasing packages to PyPI.</p>\n</li>\n<li>\n<p>Using an app instead of, say, writing a <a href=\"https://cookiecutter.readthedocs.io/en/stable/index.html\">cookiecutter</a> template makes it easier to test the boilerplate packages being created.</p>\n</li>\n<li>\n<p>I wanted something easily shareable at work. We&rsquo;ve already confirmed that uv <a href=\"https://beckysweger.com/2025/01/23/more-machines-more-python-setup.html\">works on everyone&rsquo;s machine</a>, so now people can use <a href=\"https://docs.astral.sh/uv/concepts/tools/\">uv tools</a> + pyprefab to spin up a new app without explicitly installing anything else:</p>\n<p><code>uvx pyprefab</code></p>\n</li>\n</ul>\n<p>pyprefab is opinionated, so I&rsquo;ll probably write about some of those opinions in the future.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The world doesn't need another Python app generator, but I made one anyway. It's called [pyprefab](https://pypi.org/project/pyprefab/), and it's a little cli that prompts for a few pieces of information and then creates a Python package that's ready to go (*e.g.*, script entry point, test suite, Sphinx docs, configured logs).\n\nBeyond having a way to quickly stand up new Python projects just the way I like 'em, my goals for working on pyprefab are:\n\n- I've always worked on internal Python apps and wanted more experience releasing packages to PyPI.\n- Using an app instead of, say, writing a [cookiecutter](https://cookiecutter.readthedocs.io/en/stable/index.html) template makes it easier to test the boilerplate packages being created.\n- I wanted something easily shareable at work. We've already confirmed that uv [works on everyone's machine](https://beckysweger.com/2025/01/23/more-machines-more-python-setup.html), so now people can use [uv tools](https://docs.astral.sh/uv/concepts/tools/) + pyprefab to spin up a new app without explicitly installing anything else:\n\n    `uvx pyprefab`\n\npyprefab is opinionated, so I'll probably write about some of those opinions in the future.\n\t\n\n<img src=\"uploads/2025/pyprefab-demo.gif\" alt=\"animated demo of using pyprefab\">\n",
				"date_published": "2025-02-25T00:51:36-04:00",
				"url": "https://beckysweger.com/2025/02/24/pyprefab-if-you-need-to.html",
				"tags": ["python","uv","pyprefab"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/22/uv-python-pareto.html",
				"title": "uv: python pareto",
				"content_html": "<blockquote>\n<p>bootstrapping in Python is the root of all evil. By bootstrapping, I mean provisioning Python itself, and configuring a new project so that you can later on install dependencies or build a package. Most problems you have down the road (E.G: packaging problems) actually stem from this</p>\n</blockquote>\n<p>from <a href=\"https://www.bitecode.dev/p/a-year-of-uv-pros-cons-and-should\">Kevin Samuel, A year of uv: pros, cons, and should you migrate</a></p>\n<p>After working as a data engineer at a tech company for nearly six years, on a team composed of software developers who all have the same zippy laptop and the luxury of knowing in advance where their code is going to run, I&rsquo;d almost forgotten about Python&rsquo;s bootstrapping challenges. After starting a new job on a small academic team, I had to remember pretty quickly.</p>\n<p>So much of the above article resonates with my recent experience of devising Python setup notes for a team of people with different operating systems who don&rsquo;t have administrative access to their machines.</p>\n<p>A delightful, highly-opinionated read about various Python pitfalls, their history, and how <a href=\"https://docs.astral.sh/uv/\">uv</a> can solve nearly all of them.</p>\n",
				"content_text": "> bootstrapping in Python is the root of all evil. By bootstrapping, I mean provisioning Python itself, and configuring a new project so that you can later on install dependencies or build a package. Most problems you have down the road (E.G: packaging problems) actually stem from this\n\nfrom [Kevin Samuel, A year of uv: pros, cons, and should you migrate](https://www.bitecode.dev/p/a-year-of-uv-pros-cons-and-should)\n\nAfter working as a data engineer at a tech company for nearly six years, on a team composed of software developers who all have the same zippy laptop and the luxury of knowing in advance where their code is going to run, I'd almost forgotten about Python's bootstrapping challenges. After starting a new job on a small academic team, I had to remember pretty quickly.\n\nSo much of the above article resonates with my recent experience of devising Python setup notes for a team of people with different operating systems who don't have administrative access to their machines. \n\nA delightful, highly-opinionated read about various Python pitfalls, their history, and how [uv](https://docs.astral.sh/uv/) can solve nearly all of them.\n",
				"date_published": "2025-02-22T16:35:02-04:00",
				"url": "https://beckysweger.com/2025/02/22/uv-python-pareto.html",
				"tags": ["python","uv"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/11/a-long-time-ago-i.html",
				
				"content_html": "<p>A long time ago, I made this .gif for a presentation, to explain why columnar databases are well-suited for analytics workloads. Especially when you only need a subset of the columns to run your query.</p>\n<p>First .gif I ever made, and perhaps my last.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "A long time ago, I made this .gif for a presentation, to explain why columnar databases are well-suited for analytics workloads. Especially when you only need a subset of the columns to run your query.\n\nFirst .gif I ever made, and perhaps my last.\n\n<img src=\"https://cdn.uploads.micro.blog/193728/2025/column-store.gif\" width=\"600\" height=\"438\" alt=\"\">\n",
				"date_published": "2025-02-11T18:20:20-04:00",
				"url": "https://beckysweger.com/2025/02/11/a-long-time-ago-i.html",
				"tags": ["data"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/11/i-heard-you-like-usaspending.html",
				"title": "I heard you like usaspending data, so have a PostgreSQL",
				"content_html": "<p>Working in the open has many upsides, one of which is the ability to share stories about a project without revealing anything proprietary.</p>\n<p>So this is a story about the software project that culminated in the 2017 relaunch of <a href=\"https://www.usaspending.gov/\">usaspending.gov</a>.  Not only was the code open source (<a href=\"https://github.com/fedspendingtransparency\">it still is</a>), but our JIRA tickets were open to all, and we had a website for collaborating with the public and other feds to <a href=\"https://beckysweger.com/2025/03/26/excel-for-data-standards.html\">develop the data standards</a> that power the site.</p>\n<p>My time as the 18F technical lead on that project is a career highlight, and it&rsquo;s been on my mind as usaspending.gov and all federal data are getting attention. Feeling an urge to archive, I recently checked to see if the usaspending backend database is still available to the public. <a href=\"https://onevoicecrm.my.site.com/usaspending/s/database-download\">It is</a>!</p>\n<p>Having that PostgreSQL archive is important right now, but the original reason for making it available was a creative workaround to a software delivery conundrum.</p>\n<p>The law behind an expanded and improved usaspending.gov (the <a href=\"https://www.congress.gov/bill/113th-congress/senate-bill/994\">DATA Act</a>) mandated an implementation no later than May 2017. The team was maybe a sprint away from this deadline when we found a data aggregation bug that caused some incorrect totals on the test website. It was a relatively straightforward problem and absolutely fixable in the remaining time before launch.</p>\n<p>However, making that fix would mean no time to implement the last remaining &ldquo;must have&rdquo; feature before going live: a way to download the site&rsquo;s data. Providing the ability to download search results was not only a critical capability⎻it was something promised on the project&rsquo;s road map.</p>\n<p>And deviating from that roadmap would have been a sign of failure to the many people who believed that a government-wide, agile, open data software development project could not succeed.</p>\n<p>So we faced that classic software delivery quandry: can&rsquo;t move the date, can&rsquo;t change the scope.</p>\n<p>We obviously prioritized fixing the data bug. As for providing a data download feature, someone on the team had the idea to contact AWS, who made a <a href=\"https://aws.amazon.com/blogs/publicsector/announcing-usaspending-gov-on-an-amazon-rds-snapshot/\">snapshot of our PostgreSQL database available as part of their open data program</a> in time for launch.¹</p>\n<p>Not a user-friendly download capability², but a download capability nonetheless. And that&rsquo;s the original reason for publishing a usaspending.gov database snapshot.</p>\n<p>¹ It&rsquo;s not on AWS anymore, but the announcement page lives on!<br>\n² A more traditional data download feature quickly followed the website&rsquo;s launch.</p>\n",
				"content_text": "Working in the open has many upsides, one of which is the ability to share stories about a project without revealing anything proprietary. \n\nSo this is a story about the software project that culminated in the 2017 relaunch of [usaspending.gov](https://www.usaspending.gov/).  Not only was the code open source ([it still is](https://github.com/fedspendingtransparency)), but our JIRA tickets were open to all, and we had a website for collaborating with the public and other feds to [develop the data standards](https://beckysweger.com/2025/03/26/excel-for-data-standards.html) that power the site.\n\nMy time as the 18F technical lead on that project is a career highlight, and it's been on my mind as usaspending.gov and all federal data are getting attention. Feeling an urge to archive, I recently checked to see if the usaspending backend database is still available to the public. [It is](https://onevoicecrm.my.site.com/usaspending/s/database-download)!\n\nHaving that PostgreSQL archive is important right now, but the original reason for making it available was a creative workaround to a software delivery conundrum.\n\nThe law behind an expanded and improved usaspending.gov (the [DATA Act](https://www.congress.gov/bill/113th-congress/senate-bill/994)) mandated an implementation no later than May 2017. The team was maybe a sprint away from this deadline when we found a data aggregation bug that caused some incorrect totals on the test website. It was a relatively straightforward problem and absolutely fixable in the remaining time before launch.\n\nHowever, making that fix would mean no time to implement the last remaining \"must have\" feature before going live: a way to download the site's data. Providing the ability to download search results was not only a critical capability⎻it was something promised on the project's road map.\n\nAnd deviating from that roadmap would have been a sign of failure to the many people who believed that a government-wide, agile, open data software development project could not succeed.\n\nSo we faced that classic software delivery quandry: can't move the date, can't change the scope.\n\nWe obviously prioritized fixing the data bug. As for providing a data download feature, someone on the team had the idea to contact AWS, who made a [snapshot of our PostgreSQL database available as part of their open data program](https://aws.amazon.com/blogs/publicsector/announcing-usaspending-gov-on-an-amazon-rds-snapshot/) in time for launch.¹\n\nNot a user-friendly download capability², but a download capability nonetheless. And that's the original reason for publishing a usaspending.gov database snapshot.\n\n¹ It's not on AWS anymore, but the announcement page lives on!  \n² A more traditional data download feature quickly followed the website's launch.\n\n",
				"date_published": "2025-02-11T01:21:51-04:00",
				"url": "https://beckysweger.com/2025/02/11/i-heard-you-like-usaspending.html",
				"tags": ["stories"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/02/04/using-polars-for-anonymous-access.html",
				"title": "Using Polars for anonymous access to public data on S3",
				"content_html": "<p><a href=\"https://docs.pola.rs/\">Polars</a> is a really handy go-to for working with public data hosted on AWS S3, and I prefer it over Pandas for most work these days. Using Polars to get a <a href=\"https://docs.pola.rs/api/python/stable/reference/dataframe/index.html\">DataFrame</a> via a bucket&rsquo;s HTTPS endpoint is straightforward:</p>\n<pre tabindex=\"0\"><code>df = pl.read_parquet(\n  &quot;https://ookla-open-data.s3.us-west-2.amazonaws.com/parquet/performance/type=fixed/year=2024/quarter=4/2024-10-01_performance_fixed_tiles.parquet&quot;\n)\n\ndf.select([&quot;quadkey&quot;, &quot;avg_d_kbps&quot;, &quot;avg_u_kbps&quot;, &quot;tests&quot;]).head()\n┌──────────────────┬────────────┬────────────┬───────┐\n│ quadkey          ┆ avg_d_kbps ┆ avg_u_kbps ┆ tests │\n│ ---              ┆ ---        ┆ ---        ┆ ---   │\n│ str              ┆ i64        ┆ i64        ┆ i64   │\n╞══════════════════╪════════════╪════════════╪═══════╡\n│ 0022133222312323 ┆ 33682      ┆ 3278       ┆ 1     │\n│ 0022133222330031 ┆ 97271      ┆ 14686      ┆ 2     │\n│ 0022133222330033 ┆ 92047      ┆ 27325      ┆ 1     │\n│ 0022232311221201 ┆ 537        ┆ 255        ┆ 1     │\n│ 0022302331120033 ┆ 104525     ┆ 4896       ┆ 1     │\n└──────────────────┴────────────┴────────────┴───────┘\n</code></pre><p>However, to read hive-partitioned S3 data or to specify a glob pattern, you&rsquo;ll need to use the <code>s3://</code> protocol. Polars supports this, but the documentation doesn&rsquo;t provide a clear example for bypassing a credentials check and accessing public data anonymously.</p>\n<p>Using the same dataset as above, here&rsquo;s the <code>storage_options</code> incantation that&rsquo;s akin to the AWS CLI&rsquo;s <code>--no-sign-request</code> option. In this example, 2024 is further partitioned into quarters; Polars detects the partitions and slurps multiple files into a single dataframe.</p>\n<pre tabindex=\"0\"><code>df1 = pl.read_parquet(\n  &quot;s3://ookla-open-data/parquet/performance/type=fixed/year=2024/&quot;,\n  storage_options={&quot;skip_signature&quot;: &quot;true&quot;}\n)\n\ndf1.select([&quot;quarter&quot;, &quot;quadkey&quot;, &quot;avg_d_kbps&quot;, &quot;avg_u_kbps&quot;, &quot;tests&quot;]).head()\n┌─────────┬──────────────────┬────────────┬────────────┬───────┐\n│ quarter ┆ quadkey          ┆ avg_d_kbps ┆ avg_u_kbps ┆ tests │\n│ ---     ┆ ---              ┆ ---        ┆ ---        ┆ ---   │\n│ i64     ┆ str              ┆ i64        ┆ i64        ┆ i64   │\n╞═════════╪══════════════════╪════════════╪════════════╪═══════╡\n│ 1       ┆ 0022133222312323 ┆ 64266      ┆ 7578       ┆ 2     │\n│ 1       ┆ 0022133222330012 ┆ 158062     ┆ 14698      ┆ 1     │\n│ 1       ┆ 0022133222330030 ┆ 126380     ┆ 5043       ┆ 3     │\n│ 1       ┆ 0022133222330031 ┆ 87525      ┆ 10572      ┆ 3     │\n│ 1       ┆ 0022133222330032 ┆ 58296      ┆ 8058       ┆ 13    │\n└─────────┴──────────────────┴────────────┴────────────┴───────┘\n</code></pre>",
				"content_text": "[Polars](https://docs.pola.rs/) is a really handy go-to for working with public data hosted on AWS S3, and I prefer it over Pandas for most work these days. Using Polars to get a [DataFrame](https://docs.pola.rs/api/python/stable/reference/dataframe/index.html) via a bucket's HTTPS endpoint is straightforward:\n\n```\ndf = pl.read_parquet(\n  \"https://ookla-open-data.s3.us-west-2.amazonaws.com/parquet/performance/type=fixed/year=2024/quarter=4/2024-10-01_performance_fixed_tiles.parquet\"\n)\n\ndf.select([\"quadkey\", \"avg_d_kbps\", \"avg_u_kbps\", \"tests\"]).head()\n┌──────────────────┬────────────┬────────────┬───────┐\n│ quadkey          ┆ avg_d_kbps ┆ avg_u_kbps ┆ tests │\n│ ---              ┆ ---        ┆ ---        ┆ ---   │\n│ str              ┆ i64        ┆ i64        ┆ i64   │\n╞══════════════════╪════════════╪════════════╪═══════╡\n│ 0022133222312323 ┆ 33682      ┆ 3278       ┆ 1     │\n│ 0022133222330031 ┆ 97271      ┆ 14686      ┆ 2     │\n│ 0022133222330033 ┆ 92047      ┆ 27325      ┆ 1     │\n│ 0022232311221201 ┆ 537        ┆ 255        ┆ 1     │\n│ 0022302331120033 ┆ 104525     ┆ 4896       ┆ 1     │\n└──────────────────┴────────────┴────────────┴───────┘\n```\nHowever, to read hive-partitioned S3 data or to specify a glob pattern, you'll need to use the `s3://` protocol. Polars supports this, but the documentation doesn't provide a clear example for bypassing a credentials check and accessing public data anonymously.\n\nUsing the same dataset as above, here's the `storage_options` incantation that's akin to the AWS CLI's `--no-sign-request` option. In this example, 2024 is further partitioned into quarters; Polars detects the partitions and slurps multiple files into a single dataframe.\n\n```\ndf1 = pl.read_parquet(\n  \"s3://ookla-open-data/parquet/performance/type=fixed/year=2024/\",\n  storage_options={\"skip_signature\": \"true\"}\n)\n\ndf1.select([\"quarter\", \"quadkey\", \"avg_d_kbps\", \"avg_u_kbps\", \"tests\"]).head()\n┌─────────┬──────────────────┬────────────┬────────────┬───────┐\n│ quarter ┆ quadkey          ┆ avg_d_kbps ┆ avg_u_kbps ┆ tests │\n│ ---     ┆ ---              ┆ ---        ┆ ---        ┆ ---   │\n│ i64     ┆ str              ┆ i64        ┆ i64        ┆ i64   │\n╞═════════╪══════════════════╪════════════╪════════════╪═══════╡\n│ 1       ┆ 0022133222312323 ┆ 64266      ┆ 7578       ┆ 2     │\n│ 1       ┆ 0022133222330012 ┆ 158062     ┆ 14698      ┆ 1     │\n│ 1       ┆ 0022133222330030 ┆ 126380     ┆ 5043       ┆ 3     │\n│ 1       ┆ 0022133222330031 ┆ 87525      ┆ 10572      ┆ 3     │\n│ 1       ┆ 0022133222330032 ┆ 58296      ┆ 8058       ┆ 13    │\n└─────────┴──────────────────┴────────────┴────────────┴───────┘\n```\n",
				"date_published": "2025-02-04T21:45:57-04:00",
				"url": "https://beckysweger.com/2025/02/04/using-polars-for-anonymous-access.html",
				"tags": ["til","python","polars","data"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/27/a-few-small-repairs.html",
				"title": "A few small repairs",
				"content_html": "<p>Some more micro-improvements in service to the <a href=\"https://beckysweger.com/2024/03/23/the-technical-debt-of-a.html\">technical debt of a thousand paper cuts</a>:</p>\n<ul>\n<li><a href=\"https://osxdaily.com/2016/09/09/view-folder-tree-terminal-mac-os-tree-equivalent/\">Installed tree on MacOS</a>.</li>\n<li>Switched terminals again, this time to <a href=\"https://ghostty.org/\">Ghostty</a>. Warp was good (especially the <a href=\"https://docs.warp.dev/features/blocks\">blocks</a>), but the ever-increasing AI focus got tedious.</li>\n<li>Installed a VSCode extension that <a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\">renders GitHub-flavored markdown correctly</a>. No more mediocre markdown previews.</li>\n<li>Replaced the nano editor with <a href=\"https://micro-editor.github.io/\">micro</a> because I want terminal stuff to be colorful by default.</li>\n<li>Began dropping <a href=\"https://setuptools-scm.readthedocs.io/en/stable/\">setuptools-scm</a> into Python packages to handle dynamic versioning.</li>\n<li>Started using sparse git checkouts for working on subsets of big old repos.</li>\n</ul>\n",
				"content_text": "Some more micro-improvements in service to the [technical debt of a thousand paper cuts](https://beckysweger.com/2024/03/23/the-technical-debt-of-a.html):\n\n- [Installed tree on MacOS](https://osxdaily.com/2016/09/09/view-folder-tree-terminal-mac-os-tree-equivalent/).\n- Switched terminals again, this time to [Ghostty](https://ghostty.org/). Warp was good (especially the [blocks](https://docs.warp.dev/features/blocks)), but the ever-increasing AI focus got tedious.\n- Installed a VSCode extension that [renders GitHub-flavored markdown correctly](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one). No more mediocre markdown previews.\n- Replaced the nano editor with [micro](https://micro-editor.github.io/) because I want terminal stuff to be colorful by default.\n- Began dropping [setuptools-scm](https://setuptools-scm.readthedocs.io/en/stable/) into Python packages to handle dynamic versioning.\n- Started using sparse git checkouts for working on subsets of big old repos.\n",
				"date_published": "2025-01-27T23:48:47-04:00",
				"url": "https://beckysweger.com/2025/01/27/a-few-small-repairs.html",
				"tags": ["tech"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/23/more-machines-more-python-setup.html",
				"title": "More machines, more Python setup problems",
				"content_html": "<p>After working at a large tech company for nearly six years, I was unprepared for how spoiled I&rsquo;d gotten when working on teams with uniform technology. Teams where everyone is admin on their corporate-issued laptops all running the same OS. Teams where 85% of software engineers use the same IDE.</p>\n<p>Within that kind of environment, if you write instructions for setting up and contributing to a Python project, those instructions will almost certainly work on everyone else&rsquo;s machine.</p>\n<p>But when no two teammates—let alone potential contributors to our open source software—have the same setup, all bets are off:</p>\n<ul>\n<li>IT restrictions block the thing</li>\n<li>The Makefile doesn&rsquo;t run on Windows</li>\n<li>Conda edited .bashrc and stuck its base Python environment at the beginning of $PATH</li>\n<li>IDE can&rsquo;t find the virtual environment</li>\n<li>Anti-virus blocks the other thing</li>\n<li>Docker malarkey</li>\n</ul>\n<p>Hence, all the <a href=\"https://beckysweger.com/2025/01/09/im-gonna-write-about-uv.html\">uv</a> <a href=\"https://beckysweger.com/2025/01/14/python-uv-contributing-is-caring.html\">posts</a>. Sure, the speed is nice, and <a href=\"https://beckysweger.com/2025/01/06/change-your-life-with-uv.html\">using <code>uv run</code> to share scripts is A++</a>. But it&rsquo;s also the only all-in-one Python installer, venv, and dependency management tool we&rsquo;ve tried that actually does what we need and so far runs as expected on everyone&rsquo;s machine.</p>\n",
				"content_text": "After working at a large tech company for nearly six years, I was unprepared for how spoiled I'd gotten when working on teams with uniform technology. Teams where everyone is admin on their corporate-issued laptops all running the same OS. Teams where 85% of software engineers use the same IDE.\r\n\r\nWithin that kind of environment, if you write instructions for setting up and contributing to a Python project, those instructions will almost certainly work on everyone else's machine.\r\n\r\nBut when no two teammates—let alone potential contributors to our open source software—have the same setup, all bets are off:\r\n\r\n- IT restrictions block the thing\r\n- The Makefile doesn't run on Windows\r\n- Conda edited .bashrc and stuck its base Python environment at the beginning of $PATH\r\n- IDE can't find the virtual environment\r\n- Anti-virus blocks the other thing\r\n- Docker malarkey\r\n\r\nHence, all the [uv](https://beckysweger.com/2025/01/09/im-gonna-write-about-uv.html) [posts](https://beckysweger.com/2025/01/14/python-uv-contributing-is-caring.html). Sure, the speed is nice, and [using `uv run` to share scripts is A++](https://beckysweger.com/2025/01/06/change-your-life-with-uv.html). But it's also the only all-in-one Python installer, venv, and dependency management tool we've tried that actually does what we need and so far runs as expected on everyone's machine.\r\n\r\n",
				"date_published": "2025-01-23T22:30:31-04:00",
				"url": "https://beckysweger.com/2025/01/23/more-machines-more-python-setup.html",
				"tags": ["tech","python"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/16/living-that-tokenfree-life.html",
				"title": "Living that token-free life",
				"content_html": "<p>Finally published something to PyPi (Python&rsquo;s packaging index) after more than a decade of writing Python. It&rsquo;s not exactly new news, but the <a href=\"https://docs.pypi.org/trusted-publishers/\">trusted publishing feature</a> is A++  and straightforward to set up if you use GitHub actions to write to PyPI</p>\n<p>When they first hear about the lack of tokens, people can be pretty skeptical about OIDC + GitHub Actions + PyPy/AWS/whatever.  We&rsquo;ve been conditioned to equate long, weird-looking strings with security, so the idea of <em>not</em> having a long, weird-looking string seems wrong somehow.</p>\n<p>I&rsquo;ve struggled to explain clearly how the pieces fit together and was happy to stumble on this 2023 explainer from Trail of Bits, who worked with the Python Packaging Authority (PyPA) to implement trusted publishers. Bookmarked!</p>\n<p><a href=\"https://blog.trailofbits.com/2023/05/23/trusted-publishing-a-new-benchmark-for-packaging-security/\">blog.trailofbits.com/2023/05/2&hellip;</a></p>\n",
				"content_text": "Finally published something to PyPi (Python's packaging index) after more than a decade of writing Python. It's not exactly new news, but the [trusted publishing feature](https://docs.pypi.org/trusted-publishers/) is A++  and straightforward to set up if you use GitHub actions to write to PyPI\n\nWhen they first hear about the lack of tokens, people can be pretty skeptical about OIDC + GitHub Actions + PyPy/AWS/whatever.  We've been conditioned to equate long, weird-looking strings with security, so the idea of _not_ having a long, weird-looking string seems wrong somehow.\n\nI've struggled to explain clearly how the pieces fit together and was happy to stumble on this 2023 explainer from Trail of Bits, who worked with the Python Packaging Authority (PyPA) to implement trusted publishers. Bookmarked!\n\n[blog.trailofbits.com/2023/05/2...](https://blog.trailofbits.com/2023/05/23/trusted-publishing-a-new-benchmark-for-packaging-security/)\n\n",
				"date_published": "2025-01-16T21:23:16-04:00",
				"url": "https://beckysweger.com/2025/01/16/living-that-tokenfree-life.html",
				"tags": ["tech","python"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/14/python-uv-contributing-is-caring.html",
				"title": "Python uv: slaying the project setup yaks",
				"content_html": "<p>Life with <code>uv run</code> is going well. The <a href=\"https://beckysweger.com/2025/01/06/change-your-life-with-uv.html\">aforementioned smart, busy colleagues who mostly program in R</a> have <code>uv</code> installed on their machines and the shared Python scripts are flowing.</p>\n<p>You&rsquo;re now ready for Phase 2 of &ldquo;no more Futzing Around™️ with Python.&rdquo;</p>\n<p>One day, a colleague wants to update an internally-developed Python package. That person may not write a lot of Python, but they can certainly fix a straightforward bug or typo. So they refer to <code>CONTRIBUTING.md</code> and find the following instructions for creating a dev environment:</p>\n<ol>\n<li>Clone the repo.</li>\n<li>Look at <code>.python-version</code> to find out which version of Python we&rsquo;re using for development.</li>\n<li>Install pyenv and use pyenv to install the above version of Python.</li>\n<li>Create a virtual environment. It’s tempting to skip this step, but please don’t. You can use python, pyenv-virtualenv, poetry, conda, pdm, hatch, pipenv, rye, or uv to create a virtual environment. <code>CONTRIBUTING.md</code> recommends whatever tool its author likes.</li>\n<li>Activate the virtual environment.</li>\n<li>Install the package dev dependencies: <code>pip install -r requirements-dev.txt</code></li>\n<li>Install the package as an editable module: <code>pip install -e .</code></li>\n<li>Before making your change run the tests to ensure all is well: <code>pytest</code></li>\n</ol>\n<p>Now that everyone on the team has <code>uv</code> installed, you can simplify <code>CONTRIBUTING.md</code> to something like this:</p>\n<ol>\n<li>Clone the repo.</li>\n<li>Create a virtual environment: <code>uv venv --seed</code>¹</li>\n<li>Install the package dev dependencies: <code>uv pip install -r requirements-dev.txt</code></li>\n<li>Install the package as an editable module: <code>uv pip install -e .</code></li>\n<li>Before making your change run the tests to ensure all is well: <code>uv run pytest</code></li>\n</ol>\n<p>I like this approach for two reasons:</p>\n<ol>\n<li>It removes barriers to entry for potential collaborators.</li>\n<li>Yet it doesn&rsquo;t require existing contributors to change the way they work. People are free to handle their own Python installs, virtual environments, and dependencies as they see fit (as long as they generate annotated requirements.txt files when updating dependencies).²</li>\n</ol>\n<p>¹ <a href=\"https://beckysweger.com/2025/01/14/seeding-virtual-environments-with-pip.html\"><code>--seed</code> tells <code>uv</code> to include seed packages like <code>pip</code> and <code>setuptools</code> in the virtual environment it creates</a>. It&rsquo;s helpful for people who would rather activate the environment instead of prefixing every command with <code>uv run</code> or <code>uv pip</code>.</p>\n<p>² Add <code>uv.lock</code> to <code>.gitignore</code> to remove any confusion on this point.</p>\n",
				"content_text": "Life with `uv run` is going well. The [aforementioned smart, busy colleagues who mostly program in R](https://beckysweger.com/2025/01/06/change-your-life-with-uv.html) have `uv` installed on their machines and the shared Python scripts are flowing.\n\nYou're now ready for Phase 2 of \"no more Futzing Around™️ with Python.\"\n\nOne day, a colleague wants to update an internally-developed Python package. That person may not write a lot of Python, but they can certainly fix a straightforward bug or typo. So they refer to `CONTRIBUTING.md` and find the following instructions for creating a dev environment:\n\n1. Clone the repo.\n2. Look at `.python-version` to find out which version of Python we're using for development.\n3. Install pyenv and use pyenv to install the above version of Python.\n4. Create a virtual environment. It’s tempting to skip this step, but please don’t. You can use python, pyenv-virtualenv, poetry, conda, pdm, hatch, pipenv, rye, or uv to create a virtual environment. `CONTRIBUTING.md` recommends whatever tool its author likes.\n5. Activate the virtual environment.\n6. Install the package dev dependencies: `pip install -r requirements-dev.txt`\n7. Install the package as an editable module: `pip install -e .`\n8. Before making your change run the tests to ensure all is well: `pytest`\n\nNow that everyone on the team has `uv` installed, you can simplify `CONTRIBUTING.md` to something like this:\n\n1. Clone the repo.\n2. Create a virtual environment: `uv venv --seed`¹\n3. Install the package dev dependencies: `uv pip install -r requirements-dev.txt`\n4. Install the package as an editable module: `uv pip install -e .`\n5. Before making your change run the tests to ensure all is well: `uv run pytest`\n\nI like this approach for two reasons:\n\n1. It removes barriers to entry for potential collaborators.\n2. Yet it doesn't require existing contributors to change the way they work. People are free to handle their own Python installs, virtual environments, and dependencies as they see fit (as long as they generate annotated requirements.txt files when updating dependencies).²\n\n¹ [`--seed` tells `uv` to include seed packages like `pip` and `setuptools` in the virtual environment it creates](https://beckysweger.com/2025/01/14/seeding-virtual-environments-with-pip.html). It's helpful for people who would rather activate the environment instead of prefixing every command with `uv run` or `uv pip`.\n\n² Add `uv.lock` to `.gitignore` to remove any confusion on this point.\n\n",
				"date_published": "2025-01-14T11:26:00-04:00",
				"url": "https://beckysweger.com/2025/01/14/python-uv-contributing-is-caring.html",
				"tags": ["tech","python","uv"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/14/seeding-virtual-environments-with-pip.html",
				"title": "Seeding uv virtual environments with pip",
				"content_html": "<p>It&rsquo;s great that a <a href=\"https://docs.astral.sh/uv/reference/cli/#uv-venv\">uv-created Python virtual environment</a> lives where you&rsquo;d expect it to be: in a folder called <code>.venv</code>. You can still use your muscle memory <code>source .venv/bin/activate</code> incantation to activate it.</p>\n<p>But other muscle memory commands don&rsquo;t work as well, especially those related to <code>pip</code>. By default,  <code>pip</code> isn&rsquo;t installed into uv virtual environments. So you have to do things like <code>uv pip list</code> instead of <code>pip list</code>.</p>\n<p>The uv <code>--seed</code> option fixes that by installing <code>pip</code> and other seed packages into the new environment: <code>uv venv --seed</code>.</p>\n<p>I ended up aliasing <code>uv venv</code> to <code>uv venv --seed</code> with the following function in ye old <code>.zshrc</code>:¹</p>\n<pre tabindex=\"0\"><code class=\"language-script\" data-lang=\"script\">uv() {\n  if [ &quot;$1&quot; = &quot;venv&quot; ]; then\n    shift\n    command uv venv --shell &quot;$@&quot;\n  else\n    command uv &quot;$@&quot;\n  fi\n}\n</code></pre><p>¹ Here&rsquo;s a scenario where GitHub Copilot is helpful.</p>\n",
				"content_text": "It's great that a [uv-created Python virtual environment](https://docs.astral.sh/uv/reference/cli/#uv-venv) lives where you'd expect it to be: in a folder called `.venv`. You can still use your muscle memory `source .venv/bin/activate` incantation to activate it.\n\nBut other muscle memory commands don't work as well, especially those related to `pip`. By default,  `pip` isn't installed into uv virtual environments. So you have to do things like `uv pip list` instead of `pip list`.\n\nThe uv `--seed` option fixes that by installing `pip` and other seed packages into the new environment: `uv venv --seed`.\n\nI ended up aliasing `uv venv` to `uv venv --seed` with the following function in ye old `.zshrc`:¹\n\n```script\nuv() {\n  if [ \"$1\" = \"venv\" ]; then\n    shift\n    command uv venv --shell \"$@\"\n  else\n    command uv \"$@\"\n  fi\n}\n```\n¹ Here's a scenario where GitHub Copilot is helpful.\n\n\n",
				"date_published": "2025-01-14T10:03:13-04:00",
				"url": "https://beckysweger.com/2025/01/14/seeding-virtual-environments-with-pip.html",
				"tags": ["til","python","uv"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/09/im-gonna-write-about-uv.html",
				"title": "uv run redux",
				"content_html": "<p>I&rsquo;m gonna write about <code>uv run</code> again, because it&rsquo;s just that handy!</p>\n<p>Lou Franco <a href=\"https://mastodon.social/@loufranco/113783255399204720\">asked a very good question</a> about the <a href=\"https://beckysweger.com/2025/01/06/change-your-life-with-uv.html\"><code>uv run</code> post from earlier in the week</a>:</p>\n<blockquote>\n<p>is there much that the sharer has to do? (I have a requirements.txt file)</p>\n</blockquote>\n<p>Nope! Assuming that the script and requirements.txt file are in the same directory (and that the person running the script has uv installed):</p>\n<p><code>uv run --with-requirements requirements.txt very-useful-script.py</code></p>\n<p>You could also <a href=\"https://docs.astral.sh/uv/guides/scripts/#declaring-script-dependencies\">embed the requirements in the script itself</a>. Or install dependencies from <code>pyproject.toml</code> Or use an index other than PyPI. Or load some environment variables before running the script. It&rsquo;s all here: <a href=\"https://docs.astral.sh/uv/reference/cli/#uv-run\">https://docs.astral.sh/uv/reference/cli/#uv-run</a></p>\n<p>It&rsquo;s one of the great things about uv. You can use it to manage an entire Python project, but you don&rsquo;t <em>have</em> to: just pick and choose what you need.</p>\n<p>P.S. Lou <a href=\"https://loufranco.com/\">has a blog</a> and is <a href=\"https://loufranco.com/tech-debt-book\">writing a book about tech debt</a>. You should read them!</p>\n",
				"content_text": "I'm gonna write about `uv run` again, because it's just that handy!\n\nLou Franco [asked a very good question](https://mastodon.social/@loufranco/113783255399204720) about the [`uv run` post from earlier in the week](https://beckysweger.com/2025/01/06/change-your-life-with-uv.html):\n\n>  is there much that the sharer has to do? (I have a requirements.txt file)\n\nNope! Assuming that the script and requirements.txt file are in the same directory (and that the person running the script has uv installed):\n\n`uv run --with-requirements requirements.txt very-useful-script.py`\n\nYou could also [embed the requirements in the script itself](https://docs.astral.sh/uv/guides/scripts/#declaring-script-dependencies). Or install dependencies from `pyproject.toml` Or use an index other than PyPI. Or load some environment variables before running the script. It's all here: [https://docs.astral.sh/uv/reference/cli/#uv-run](https://docs.astral.sh/uv/reference/cli/#uv-run)\n\nIt's one of the great things about uv. You can use it to manage an entire Python project, but you don't _have_ to: just pick and choose what you need.\n\nP.S. Lou [has a blog](https://loufranco.com/) and is [writing a book about tech debt](https://loufranco.com/tech-debt-book). You should read them!\n\n",
				"date_published": "2025-01-09T21:29:14-04:00",
				"url": "https://beckysweger.com/2025/01/09/im-gonna-write-about-uv.html",
				"tags": ["tech","python","uv"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/06/change-your-life-with-uv.html",
				"title": "Python + uv run: sharing is caring",
				"content_html": "<p>Imagine that your colleagues—very smart, busy people who mostly program in R—need a dataset that&rsquo;s difficult to create. And they want the ability to recreate the dataset as often as necessary. The freedom to tweak the code and experiment with the inputs.</p>\n<h2 id=\"without-uv\">Without uv</h2>\n<p>Good news! You have a script that does exactly what they need. It&rsquo;s written in Python instead of R, but anyone can run it by following these simple steps:</p>\n<ol>\n<li>Install Python. Python is already on your laptop, but don&rsquo;t use that one. Install a different Python. Actually, just install pyenv and then use pyenv to install Python.</li>\n<li>Create a virtual environment. It&rsquo;s tempting to skip this step, but please don&rsquo;t. You can use python, pyenv-virtualenv, poetry, conda, pdm, hatch, pipenv, rye, or uv to create a virtual environment. I will make a recommendation. Next month I will make a different recommendation.</li>\n<li>Activate your virtual environment.</li>\n<li>The script uses polars, biopython, and zstandard, so use pip to install those dependencies. Don&rsquo;t install polars 1.17.0, everything will break.</li>\n<li>Run the script: <code>python very-useful-script.py</code></li>\n</ol>\n<h2 id=\"with-uv\">With uv</h2>\n<p>Good news! You have a script that does exactly what they need. It&rsquo;s written in Python instead of R, but anyone can run it by following these simple steps:</p>\n<ol>\n<li>Install <a href=\"https://docs.astral.sh/uv/\">uv</a></li>\n<li>Use <a href=\"https://docs.astral.sh/uv/guides/scripts/\"><code>uv run</code></a> to execute the script: <code>uv run very-useful-script.py</code></li>\n</ol>\n",
				"content_text": "Imagine that your colleagues—very smart, busy people who mostly program in R—need a dataset that's difficult to create. And they want the ability to recreate the dataset as often as necessary. The freedom to tweak the code and experiment with the inputs.\n\n## Without uv\n\nGood news! You have a script that does exactly what they need. It's written in Python instead of R, but anyone can run it by following these simple steps:\n\n1. Install Python. Python is already on your laptop, but don't use that one. Install a different Python. Actually, just install pyenv and then use pyenv to install Python.\n2. Create a virtual environment. It's tempting to skip this step, but please don't. You can use python, pyenv-virtualenv, poetry, conda, pdm, hatch, pipenv, rye, or uv to create a virtual environment. I will make a recommendation. Next month I will make a different recommendation.\n3. Activate your virtual environment.\n4. The script uses polars, biopython, and zstandard, so use pip to install those dependencies. Don't install polars 1.17.0, everything will break.\n5. Run the script: `python very-useful-script.py`\n\n\n## With uv\n\nGood news! You have a script that does exactly what they need. It's written in Python instead of R, but anyone can run it by following these simple steps:\n\n1. Install [uv](https://docs.astral.sh/uv/)\n2. Use [`uv run`](https://docs.astral.sh/uv/guides/scripts/) to execute the script: `uv run very-useful-script.py`\n\n",
				"date_published": "2025-01-06T10:55:00-04:00",
				"url": "https://beckysweger.com/2025/01/06/change-your-life-with-uv.html",
				"tags": ["stories","tech","python","uv"]
			},
			{
				"id": "http://bsweger.micro.blog/2025/01/02/skip-a-job-in-a.html",
				"title": "Skip a GitHub workflow job when running on a fork",
				"content_html": "<p>Skipping GitHub action jobs on forked repos is a surprisingly hard thing to Google. Most advice says to:</p>\n<ul>\n<li>disable workflows on the forked repo</li>\n<li>hard-code a check for the repo&rsquo;s owner name to determine whether or not it&rsquo;s a fork</li>\n</ul>\n<p>But I work on a <a href=\"https://github.com/reichlab/variant-nowcast-hub\">repository at Day Job™️</a> that has many workflows, some of which are useful to external contributors who fork. Also, why give people manual instructions for something a computer can check?</p>\n<p>Secondly, the workflow in question is derived from a template used by other repository owners in our ecosystem. Ideally, there would be a solution that doesn&rsquo;t hard-code an owner name (so we can update the template itself).</p>\n<p>After following <a href=\"https://til.simonwillison.net/github-actions/dump-context\">this advice from Simon Willison</a> about dumping the GitHub actions context, I stumbled upon <code>github.event.repository.fork</code> 🎉</p>\n<p>Here&rsquo;s what it looks like in practice—the job below will not run on a fork:</p>\n<pre tabindex=\"0\"><code>jobs:\n  your-job:\n    # Don't run on forked repositories\n    if: github.event.repository.fork != true\n    runs-on: ubuntu-latest\n</code></pre>",
				"content_text": "Skipping GitHub action jobs on forked repos is a surprisingly hard thing to Google. Most advice says to:\n\n- disable workflows on the forked repo\n- hard-code a check for the repo's owner name to determine whether or not it's a fork\n\nBut I work on a [repository at Day Job™️](https://github.com/reichlab/variant-nowcast-hub) that has many workflows, some of which are useful to external contributors who fork. Also, why give people manual instructions for something a computer can check?\n\nSecondly, the workflow in question is derived from a template used by other repository owners in our ecosystem. Ideally, there would be a solution that doesn't hard-code an owner name (so we can update the template itself).\n\nAfter following [this advice from Simon Willison](https://til.simonwillison.net/github-actions/dump-context) about dumping the GitHub actions context, I stumbled upon `github.event.repository.fork` 🎉\n\nHere's what it looks like in practice—the job below will not run on a fork:\n\n```\njobs:\n  your-job:\n    # Don't run on forked repositories\n    if: github.event.repository.fork != true\n    runs-on: ubuntu-latest\n```\n",
				"date_published": "2025-01-02T21:06:59-04:00",
				"url": "https://beckysweger.com/2025/01/02/skip-a-job-in-a.html",
				"tags": ["tech","til"]
			},
			{
				"id": "http://bsweger.micro.blog/2024/12/31/this-aged-well-etc-etchttpsjawnsclubbendystraw.html",
				"title": "🎶 It's the most wonderful time of the year to mess around with your blog",
				"content_html": "<p>This idea did not age particularly well, given 2024&rsquo;s various WordPress dramas.</p>\n\n\t\t\n\t\t\t<blockquote class=\"toot-blockquote\" cite=\"https://jawns.club@bendystraw/status/109979304645203691\">\n\t\t\t\t<div class=\"toot-header\">\n\t\t\t\t\t<a class=\"toot-profile\" href=\"https://jawns.club/@bendystraw\" rel=\"noopener\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc=\"https://cdn.masto.host/jawnsclub/accounts/avatars/109/343/210/363/981/110/original/b91f4f8fd048987c.jpeg\"\n\t\t\t\t\t\t\talt=\"Mastodon avatar for @bendystraw@jawns.club\"\n\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"toot-author\">\n\t\t\t\t\t\t<a class=\"toot-author-name\" href=\"https://jawns.club/@bendystraw\" rel=\"noopener\">Becky Sweger</a>\n\t\t\t\t\t\t<a class=\"toot-author-handle\" href=\"https://jawns.club/@bendystraw\" rel=\"noopener\">@bendystraw@jawns.club</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div><p>Considering going back to good old Wordpress (hosted, this time) so I can focus on actually writing blogs instead of reminding myself how Hugo works every 18 months or so</p>\n\t\t\t\t<div class=\"toot-footer\">\n\t\t\t\t\t<a href=\"https://jawns.club/@bendystraw/109979304645203691\" class=\"toot-date\" rel=\"noopener\">1:03 AM • March 7, 2023</a>&nbsp;<span class=\"pokey\">(UTC)</span>\n\t\t\t\t</div>\n\t\t\t</blockquote>\n<p>So I moved everything to micro.blog, which lets you write in markdown while using a hosted service, so you don&rsquo;t have to upgrade hugo and remember how it works and submit a pull request whenever you want to write something.</p>\n<p>Also, it is my fervent hope that having a &ldquo;micro&rdquo; blog will silence the nagging voice insisting that each post must be a carefully crafted, highly-edited endeavor.</p>\n<p>2025 is the year of blogging&ndash;for real this time!</p>\n",
				"content_text": "This idea did not age particularly well, given 2024's various WordPress dramas. \n\n{{< stoot instance=\"jawns.club\" id=\"109979304645203691\" >}}\n\nSo I moved everything to micro.blog, which lets you write in markdown while using a hosted service, so you don't have to upgrade hugo and remember how it works and submit a pull request whenever you want to write something.\n\nAlso, it is my fervent hope that having a \"micro\" blog will silence the nagging voice insisting that each post must be a carefully crafted, highly-edited endeavor.\n\n2025 is the year of blogging--for real this time!\n",
				"date_published": "2024-12-31T18:41:34-04:00",
				"url": "https://beckysweger.com/2024/12/31/this-aged-well-etc-etchttpsjawnsclubbendystraw.html"
			},
			{
				"id": "http://bsweger.micro.blog/2024/03/23/the-technical-debt-of-a.html",
				"title": "The technical debt of a thousand paper cuts",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Over the last several years, I've spent less and less time on the treadmill of investigating the latest productivity tools and hacks related to the act of writing code. Partly because my job evolved into technical architecture and leadership and required less coding. And partly because the hard problems of writing code can't be solved by the perfect text editor or terminal setup. The hard part of writing code is figuring out what code actually needs to be written and how you're going to work with the people who will write it with you.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But I recently did an experiment and carved out time to dust off a bunch of old (and new!) \"here's a helpful thing to try\" bookmarks. And, you know, actually try those things. The result? I realized that individual tooling-related paper cuts may not prevent good work from getting done, but they can slowly pile up and create drag in your daily routine. Note self: make the easy fixes as needed, and regularly schedule time to revisit those \"things to try\" bookmarks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An incomplete list of small improvements:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul>\n<!-- wp:list-item -->\n<li>Getting right with cord management in the home office.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Tweaking global IPython settings to ensure the <a href=\"https://stackoverflow.com/a/43020072\">autoreload module is always enabled</a>. Always. Everywhere.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Finally getting around to <a href=\"https://pre-commit.com/\">pre-commit</a>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Preventing that thing where you accidentally pip install a Python package outside of a virtual environment: <code>export PIP_REQUIRE_VIRTUALENV=true</code>\n</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>\n<a href=\"https://www.atlassian.com/git/tutorials/dotfiles\">Source-controlling dotfiles</a> like a grownup.</li>\n<!-- /wp:list-item -->\n\n\n<li>Re-jigging <code>.zshrc</code> for speed.</li>\n\n<!-- wp:list-item -->\n<li>Creating a <a href=\"https://github.com/bsweger/python-app-template\">template for Python projects</a> just the way I like them.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adopting <a href=\"https://highlyopinionated.co/swish/\">Swish</a> for windows management</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Switching to <a href=\"https://www.warp.dev/\">Warp</a> terminal* </li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adopting many of the git aliases and config options in this <a href=\"https://jawns.club/@b0rk@jvns.ca/111947514705559803\">incredibly useful Mastodon thread</a> from <a href=\"https://jawns.club/@b0rk@jvns.ca\">Julia Evans</a>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adding some VSCode extensions to do quick data things without leaving a code base (browsing parquet files, for example).</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>*Supplying personal information to use a terminal gives me the heebie jeebies, and I fully expect Warp to turn evil at some point. But damn, it's so useful. The smart completions alone save so much typing.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-03-23T15:05:05-04:00",
				"url": "https://beckysweger.com/2024/03/23/the-technical-debt-of-a.html",
				"tags": ["tech"]
			},
			{
				"id": "http://bsweger.micro.blog/2024/01/08/theres-more-to-tech-than.html",
				"title": "There's more to tech than startups and large software companies",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I like to <a href=\"https://beckysweger.com/2020/10/18/tech-hiring-the-streetlight-effect/\">rant about so-called innovative software companies that all conform to the same hiring process and hire the same kinds of people</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But the lack of original thinking isn't limited to employers. Many, many candidates assume that there are two options for a software engineering job search:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n<!-- wp:list-item -->\n<li>big tech company, for a high salary and relative stability</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>startup: to shoot your shot</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Yet, these two things make up such a small fraction of \"jobs that require people good at computers.\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Any domain that tickles your fancy probably has related software jobs. And trust that software companies and startups don't have a monopoly on smart people, interesting tech, or compelling problems to solve.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-01-09T00:29:52-04:00",
				"url": "https://beckysweger.com/2024/01/08/theres-more-to-tech-than.html",
				"tags": ["career"]
			},
			{
				"id": "http://bsweger.micro.blog/2024/01/03/review-machine-learning-engineering-with.html",
				"title": "Review: Machine Learning Engineering With Python",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A few months ago, I picked up the second edition of <em><a href=\"https://www.packtpub.com/product/machine-learning-engineering-with-python-second-edition/9781837631964\">Machine Learning Engineering Python</a></em> by Andrew McMahon. After reading it cover to cover and working through the final chapters' end-to-end projects, I have some thoughts.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In summary: I loved this book. It tackles a vast, complex topic, but the style is conversational and never feels too overwhelming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Who should read <em>Machine Learning Engineering With Python</em>?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This book is about machine learning operations (MLOps) and discusses every aspect of the machine learning model lifecycle, a truly ambitious goal. Machine learning algorithms, model registries, pipelines and orchestration, creating APIs, containers, monitoring and alerting, cleaning data, Kubernetes, model testing, it's all here. And the book doesn't stop at running code on your local machine: there are several step-by-step instructions for deploying to the cloud (AWS).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I'd highly recommend <em>Machine Learning Engineering With Python</em> if any of the following is true:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n<!-- wp:list-item -->\n<li>You want a good mental model of MLOps and what roles are involved (<em>e.g.</em>, data scientists, operations engineers, data engineers).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You'd like some hands-on experience with MLOps tooling.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You're interested in some of the trade-offs to consider when building a machine learning project.</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Given that the book covers an astounding amount of ground in just over 400 pages, I wouldn't recommend the book to:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul>\n<!-- wp:list-item -->\n<li>Anyone with little or no Python experience.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Anyone looking for a deep dive into specific MLOps topics (this isn't a criticism: the goal of the book is to present an end-to-end overview of the machine learning lifecycle).</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why I Read It</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I've been working on the periphery of MLOps for the past several years. As a data engineer, I extract data, model it, and get it to users. Some of these users then do mysterious things like \"hyperparameter tuning\" and \"feature engineering\" and \"registering models.\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because it's always useful to understand what people are doing with your data, I wanted to demystify these activities and understand them at a high level. <em>Machine Learning Engineering With Python</em> delivered. If you're in the same boat, don't hesitate to buy the book. <strong>Highly, highly recommend--you will benefit, even if you don't do the coding exercises.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Hands-On</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to understanding the components of MLOps, I also wanted experience with tools of the trade. To get that, I skipped most of the code samples in the earlier chapters of the book and dove into the end-to-end projects presented in chapters 8 and 9.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The presentation of these projects was excellent. For each technical decision (<em>e.g.</em>, which training algorithm to use, how to serve models), McMahon presents several options and walks readers through the pros and cons of each one. Incredibly valuable for people trying to strengthen their mental model in the MLOps space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My one suggestion is that the code for these projects (from the book's <a href=\"https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Python-Second-Edition/tree/main/Chapter08\">GitHub</a> <a href=\"https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Python-Second-Edition/tree/main/Chapter09\">repo</a>) could be more organized: neither the book nor the READMEs had clear instructions for standing up a working system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suspect this is a result of the author trying to give his readers all the things! The projects contain multiple versions of the same code, each useful in its own right, and each highlighting useful patterns for real world scenarios. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While these variations are useful, novices would benefit from step-by-step instructions for getting the simplest possible version of each project up and running. The simple version could then be a foundation for those who want to iterate and level up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Readers will have different experiences with the hands-on portion of the book, depending on their background and what they're trying to learn. I'm happy I persevered and got some debugging experience with new tools, but I can see how someone with less time, patience, and experience untangling Python errors would get frustrated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Minimum Viable Projects</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Machine Learning Engineering With Python</em> is an excellent book. In case it's helpful for other readers, I created simple versions of the MLOps projects from Chapters 8 and 9, along with detailed READMEs for getting them to run:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul>\n<!-- wp:list-item -->\n<li>Chapter 8, retail forecasting microservice: <a href=\"https://github.com/bsweger/ml-service-demo\">https://github.com/bsweger/ml-service-demo</a>\n</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Chapter 9, taxi ride clustering and annotating with ChatGPT: <a href=\"https://github.com/bsweger/ml-etml-demo\">https://github.com/bsweger/ml-etml-demo</a>\n</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n",
				"date_published": "2024-01-03T17:39:30-04:00",
				"url": "https://beckysweger.com/2024/01/03/review-machine-learning-engineering-with.html",
				"tags": ["tech","python","data"]
			},
			{
				"id": "http://bsweger.micro.blog/2021/12/23/we-named-our-data-warehouse.html",
				"title": "We named our data warehouse after a bacteria",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Proteus 2004</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the early 2000s (peak <a href=\"https://en.wikipedia.org/wiki/Ralph_Kimball\">Kimball</a>-<a href=\"https://en.wikipedia.org/wiki/Star_schema\">star-schema</a>-business-intelligence era), my team launched a data warehouse at a hospital in New Jersey.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We were a scrappy, hard-working team and wanted people to get excited by no longer needing IT intervention for custom reports about patient stay lengths and insurance companies who weren’t paying us.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Alas, the phrase “data warehouse” wasn’t generating the appropriate enthusiasm, so we clearly needed an exciting code name for our work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At our next meeting, the team’s mythology nerd suggested that we rebrand as <em>Proteus</em>, after the omniscient <a href=\"https://en.wikipedia.org/wiki/Proteus\">Greek sea divinity</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<!-- wp:paragraph -->\n<p>[Proteus] can foretell the future, but, in a mytheme familiar to several cultures, will change his shape to avoid doing so; he answers only to those who are capable of capturing him.</p>\n<!-- /wp:paragraph -->\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>We all agreed that positioning our data warehouse as the mechanism for seizing an elusive, all-knowing god was very clever and that we were obviously marketing geniuses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Thirty minutes later, I got back to my desk and Googled <em>Proteus</em>, only to find that in addition to being a minor sea god, <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4638163/\">Proteus is also a bacteria</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<!-- wp:paragraph -->\n<p>Proteus mirabilis is a Gram-negative bacterium which is well-known for its ability to robustly swarm across surfaces in a striking bulls’-eye pattern. Clinically, this organism is most frequently a pathogen of the urinary tract.</p>\n<!-- /wp:paragraph -->\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>A pathogen of the urinary tract 😱❗️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That would have been an unfortunate revelation in any domain, but it was especially unfortunate in a healthcare setting. As newly-minted marketing geniuses, we realized that hospital employees might be wary of a project named after germs that cause urinary tract infections.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was still sad about Proteus when one of the project’s sponsors (a doctor) stopped by to chat. After hearing the story of the sea god and the UTIs, he paused a second and blurted out “Proteus: it’s not a bug!”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And so we doubled down on Proteus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>“Proteus: it’s not a bug” became our new catchphrase. We plastered it on posters that went up all over the hospital. We printed it on sticky notes. We printed it on pens, which were promptly swiped by the microbiologists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Proteus 2021</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":81,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://cdn.uploads.micro.blog/wp-content/193728/2023/03/image.png?w=1024\" alt=\"Logos and names of hundreds of products in the data and AI space as of 2021\" class=\"wp-image-81\"><figcaption class=\"wp-element-caption\"><em>Data and AI Landscape 2021 by Matt Ruck</em></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>I thought of Proteus recently, when perusing the <a href=\"https://mattturck.com/data2021/\">2021 Machine Learning, AI, and Data Landscape</a>. Surprisingly, the crowded diagram doesn’t contain one single reference to my favorite sea god. A wasted opportunity!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the very least, Proteus would be a good name for a niche AI that will text when you’re about to get a urinary tract infection. Even better would be Proteus as a bot who rides the waves of the metaverse, using its powers of omniscience to “well actually” all who dwell there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yeah, still a marketing genius after all these years.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-12-23T20:45:00-04:00",
				"url": "https://beckysweger.com/2021/12/23/we-named-our-data-warehouse.html",
				"tags": ["stories","data"]
			},
			{
				"id": "http://bsweger.micro.blog/2020/10/18/tech-hiring-the-streetlight-effect.html",
				"title": "Tech hiring: the streetlight effect",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Programmers of a <em>Certain Age</em>\n</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you’re a software engineer of a certain age–working before the first dot com, let’s say–you might remember when software engineers were mere programmers. You might also remember that programming was a job and not a lifestyle. You weren’t in “tech,” you worked for the electric company, writing the code for their billing system. A pretty fun job, and a solid middle class living.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Regardless of what we call ourselves now, telling computers what to do remains a good way to earn money (for now, until the robots take over). A “tech” job is a ticket to the middle class or, depending on where you work and live, the upper middle class.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a result, lots of people are out there trying to “break into tech.” At the same time, companies always seem to be hiring (even during these Unprecedented Times™️), often lamenting how hard it is to find “good talent.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Streetlight Effect</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To recap: a bunch of places are trying to hire for jobs that a bunch of people want to do. And yet, these places find it difficult to fill the positions. I’m glossing over some nuance, but it’s pretty hard to see this situation as anything other than a problem companies have created for themselves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There’s an <a href=\"https://en.wikipedia.org/wiki/Streetlight_effect\">old story</a> about a drunk man who loses his keys in a park, yet searches for them under a streetlight, because that’s where the light is shining. It’s a decent metaphor for the current state of tech hiring. The light is shining on a limited number of people who went to particular schools, who work at certain companies, who are connected to the right people, or who meet some other easy-to-pattern-match criteria.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the whole, companies don’t hire outside the boundaries of the streetlight. How strange that “innovators” straight-up ignore what seems like an obvious advantage: finding great people in places your competitors aren’t even looking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Old Days, Before Dot Com</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So back to the pre-dot-com days of programming. There was no expectation that new hires would join the company fully formed and ready to commit code on day one. Aspiring software developers did not simply sit around in coffee shops training themselves on side projects, since laptops cost $3,000 and dial-up ruled the land.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Thus, companies had to invest in creating the workforce they wanted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Nowadays, when someone rants about laundry-list job descriptions or multiple coding-style interviews, they’re often perceived as wanting to “lower the bar.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s maddening. A lot of this perception is gatekeeping, but some of it is the result of a field that skews young and isn’t aware of its own history. Through many conversations, I’ve realized that people are so mired in the current status quo they genuinely can’t envision tech hiring in any other form. They don’t realize there was ever another way.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For that reason, here is the abbreviated process for how I “broke into tech,” just as one small example of another way to cultivate programming talent.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">One Company’s Investment</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Several months after graduating with an English degree, I got a programming job offer. It was from a consulting firm that hired people with sound logic and communication skills and onboarded them at a six week COBOL bootcamp in Boston.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The company <em>paid us to go to bootcamp, not the other way around</em>. They very sensibly decided that a good way to get COBOL programmers was to hire smart people and teach them to be COBOL programmers. As a bonus, the instructors also taught the company’s corporate ethos, molding us into just the kind of junior associates needed to round out project teams.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The training program wasn’t an act of kindness–it was an act of capitalism. The company invested in new employees and in return were able to put us on client projects for decent hourly rates. Trainees got good starting salaries and were able to learn on the job. We worked hard to prove ourselves, and our clients benefited.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Interview Process</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This was the interview cycle:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n<!-- wp:list-item -->\n<li>Conversation with a recruiter who asked about general skills and accomplishments; no expectation that those would be tech-related.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Written communication test (can you convey ideas effectively).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Written logic test (high-level, flowchart-type stuff).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the above went well, final interview with a partner.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the partner interview went well, candidates got a job offer, contingent upon passing a computer-based, multiple choice test of COBOL concepts. Company provided a book to study from and a place to practice.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Once you passed the COBOL test, the offer was confirmed: you became an employee, and began six weeks of paid training.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>After training, you were assessed on two measures: a re-take of the COBOL test and the instructor’s appraisal of your ability to learn, communicate, and get work done.</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Time to Revisit?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By no means were things perfect, and the program certainly wasn’t a gatekeeping-free utopia. There was a college degree requirement, for example. And having to spend six weeks training in Boston meant few caregivers could participate. And while there were many women, we were mostly white.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So the company’s hiring pool was smaller than it could have been, but it was much larger than the pool most places fish from today. They assessed for potential, employing hundreds, if not thousands, of people this way, proving that engineering is a teachable skill and is more than writing code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fix the broken bits, and this model would be a starting point for companies of a certain size to find the smart, talented people working their asses off for a shot at the jobs so many of us lucked into all those years ago.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-10-18T21:21:00-04:00",
				"url": "https://beckysweger.com/2020/10/18/tech-hiring-the-streetlight-effect.html",
				"tags": ["career"]
			}
	]
}
